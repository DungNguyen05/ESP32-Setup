import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { BLEManager, ESP32Device } from '../services/BLEManager';

interface DeviceScannerProps {
  onDeviceSelected: (device: ESP32Device) => void;
}

const DeviceScanner: React.FC<DeviceScannerProps> = ({ onDeviceSelected }) => {
  const [devices, setDevices] = useState<ESP32Device[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [statusMessage, setStatusMessage] = useState('Nh·∫•n n√∫t qu√©t ƒë·ªÉ t√¨m thi·∫øt b·ªã ESP32');
  const [serverConnected, setServerConnected] = useState(true); // Mock always connected

  useEffect(() => {
    checkServerConnection();
    
    return () => {
      BLEManager.stopScan();
    };
  }, []);

  const checkServerConnection = async () => {
    // Mock server connection check (gi·ªëng Flutter)
    console.log('Mock: Checking server connection...');
    setServerConnected(true);
  };

  const startScan = async () => {
    if (isScanning) return;
    
    try {
      setIsScanning(true);
      setDevices([]);
      setStatusMessage('ƒêang ki·ªÉm tra Bluetooth...');

      const isBluetoothReady = await BLEManager.checkBluetoothState();
      if (!isBluetoothReady) {
        throw new Error('Bluetooth kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng b·∫≠t Bluetooth trong c√†i ƒë·∫∑t.');
      }

      setStatusMessage('ƒêang t√¨m ki·∫øm thi·∫øt b·ªã ESP32...');

      await BLEManager.scanForDevices((device) => {
        setDevices((prev) => {
          // Avoid duplicates
          const exists = prev.find(d => d.id === device.id);
          if (exists) {
            return prev;
          }
          
          const newDevices = [...prev, device].sort((a, b) => b.rssi - a.rssi);
          
          // Update status message
          setStatusMessage(`T√¨m th·∫•y ${newDevices.length} thi·∫øt b·ªã ESP32 ƒë√£ ƒëƒÉng k√Ω`);
          
          return newDevices;
        });
      });

      // Auto stop scanning after 30 seconds (gi·ªëng Flutter)
      setTimeout(() => {
        if (isScanning) {
          stopScan();
        }
      }, 30000);

    } catch (error) {
      console.error('Scan failed:', error);
      setIsScanning(false);
      setStatusMessage(`L·ªói: ${error}`);
      
      Alert.alert('L·ªói scan BLE', error instanceof Error ? error.message : String(error));
    }
  };

  const stopScan = async () => {
    if (!isScanning) return;
    
    BLEManager.stopScan();
    setIsScanning(false);
    
    setStatusMessage(devices.length === 0 
      ? 'Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã ESP32 n√†o ƒë√£ ƒëƒÉng k√Ω' 
      : `T√¨m th·∫•y ${devices.length} thi·∫øt b·ªã ESP32 ƒë√£ ƒëƒÉng k√Ω`
    );
  };

  const connectToDevice = async (device: ESP32Device) => {
    if (isConnecting) return;
    
    try {
      setIsConnecting(true);
      
      // Stop scanning before connecting
      if (isScanning) {
        await stopScan();
      }

      console.log('Connecting to device:', device.name);
      
      const success = await BLEManager.connectToDevice(device.id);
      
      if (success) {
        // Double check device registration (gi·ªëng Flutter)
        if (device.serialNumber) {
          console.log('Double checking device registration...');
          // Device ƒë√£ ƒë∆∞·ª£c validate trong qu√° tr√¨nh scan
        }
        
        onDeviceSelected(device);
      } else {
        Alert.alert('K·∫øt n·ªëi th·∫•t b·∫°i', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Connection error:', error);
      Alert.alert('L·ªói k·∫øt n·ªëi', 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi');
    } finally {
      setIsConnecting(false);
    }
  };

  const showInstructions = () => {
    Alert.alert(
      'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng',
      `1. Chu·∫©n b·ªã thi·∫øt b·ªã ESP32:
‚Ä¢ ƒê·∫£m b·∫£o thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c c·∫•p ngu·ªìn
‚Ä¢ Nh·∫•n gi·ªØ n√∫t b·∫•t k·ª≥ trong 5 gi√¢y ƒë·ªÉ v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh WiFi
‚Ä¢ Thi·∫øt b·ªã s·∫Ω timeout sau 3 ph√∫t n·∫øu kh√¥ng c·∫•u h√¨nh

2. Qu√©t thi·∫øt b·ªã:
‚Ä¢ Nh·∫•n n√∫t "Qu√©t thi·∫øt b·ªã" ƒë·ªÉ t√¨m ESP32
‚Ä¢ Thi·∫øt b·ªã s·∫Ω hi·ªÉn th·ªã v·ªõi t√™n "GC-<SN>"
‚Ä¢ Ch·ªâ thi·∫øt b·ªã ƒë√£ ƒëƒÉng k√Ω m·ªõi ƒë∆∞·ª£c hi·ªÉn th·ªã

3. C·∫•u h√¨nh WiFi:
‚Ä¢ Ch·ªçn thi·∫øt b·ªã t·ª´ danh s√°ch
‚Ä¢ Nh·∫≠p th√¥ng tin WiFi
‚Ä¢ Ch·ªù thi·∫øt b·ªã k·∫øt n·ªëi (t·ªëi ƒëa 40 gi√¢y)

4. Ho√†n t·∫•t c·∫•u h√¨nh:
‚Ä¢ Sau khi thi·∫øt b·ªã k·∫øt n·ªëi WiFi th√†nh c√¥ng
‚Ä¢ Nh·∫•n "X√°c nh·∫≠n ho√†n th√†nh" ƒë·ªÉ th√™m v√†o h·ªá th·ªëng
‚Ä¢ Thi·∫øt b·ªã s·∫Ω ch√≠nh th·ª©c ƒë∆∞·ª£c ghi nh·∫≠n

L∆∞u √Ω quan tr·ªçng:
‚Ä¢ ƒê·∫£m b·∫£o Bluetooth v√† Location ƒë∆∞·ª£c b·∫≠t
‚Ä¢ C·∫ßn k·∫øt n·ªëi internet ƒë·ªÉ x√°c th·ª±c thi·∫øt b·ªã
‚Ä¢ Ch·ªâ thi·∫øt b·ªã thu·ªôc t√†i kho·∫£n c·ªßa b·∫°n m·ªõi hi·ªÉn th·ªã
‚Ä¢ Ph·∫£i nh·∫•n "X√°c nh·∫≠n ho√†n th√†nh" ƒë·ªÉ ho√†n t·∫•t`,
      [{ text: 'ƒê√£ hi·ªÉu', style: 'default' }]
    );
  };

  const renderDevice = ({ item }: { item: ESP32Device }) => (
    <TouchableOpacity
      style={styles.deviceItem}
      onPress={() => connectToDevice(item)}
      disabled={isConnecting}
    >
      <View style={styles.deviceIcon}>
        <Text style={styles.deviceIconText}>üì°</Text>
      </View>
      
      <View style={styles.deviceInfo}>
        <Text style={styles.deviceName}>{item.name}</Text>
        <Text style={styles.deviceDetails}>
          Serial Number: {item.serialNumber}
        </Text>
        <Text style={styles.deviceId}>
          Device ID: {item.id.substring(0, 8)}...
        </Text>
        <View style={styles.signalContainer}>
          <Text style={styles.signalText}>üì∂ {item.rssi} dBm</Text>
        </View>
      </View>
      
      <View style={styles.deviceActions}>
        <View style={styles.registeredBadge}>
          <Text style={styles.registeredText}>ƒê√£ x√°c th·ª±c</Text>
        </View>
        {isConnecting ? (
          <ActivityIndicator size="small" color="#007AFF" />
        ) : (
          <Text style={styles.arrowText}>‚Üí</Text>
        )}
      </View>
    </TouchableOpacity>
  );

  const renderEmptyState = () => (
    <View style={styles.emptyContainer}>
      <Text style={styles.emptyIcon}>
        {isScanning ? 'üîç' : 'üì±'}
      </Text>
      <Text style={styles.emptyText}>
        {isScanning
          ? 'ƒêang t√¨m ki·∫øm thi·∫øt b·ªã ESP32...'
          : 'Ch∆∞a t√¨m th·∫•y thi·∫øt b·ªã ESP32 n√†o'
        }
      </Text>
      {!isScanning && (
        <>
          <Text style={styles.emptySubtext}>
            H√£y ƒë·∫£m b·∫£o ESP32 ƒëang ·ªü ch·∫ø ƒë·ªô c·∫•u h√¨nh WiFi{'\n'}
            v√† thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng
          </Text>
          <TouchableOpacity style={styles.refreshButton} onPress={startScan}>
            <Text style={styles.refreshButtonText}>Qu√©t l·∫°i</Text>
          </TouchableOpacity>
        </>
      )}
    </View>
  );

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>ESP32 WiFi Setup</Text>
        <View style={styles.headerActions}>
          <TouchableOpacity onPress={showInstructions} style={styles.helpButton}>
            <Text style={styles.helpButtonText}>‚ùì</Text>
          </TouchableOpacity>
          <View style={styles.serverStatus}>
            <Text style={styles.serverStatusText}>
              {serverConnected ? '‚òÅÔ∏è' : '‚ùå'}
            </Text>
          </View>
        </View>
      </View>

      {/* Status bar */}
      <View style={styles.statusBar}>
        <View style={styles.statusContent}>
          {isScanning ? (
            <ActivityIndicator size="small" color="#007AFF" style={styles.statusIcon} />
          ) : (
            <Text style={styles.statusIcon}>
              {devices.length === 0 ? '‚ÑπÔ∏è' : '‚úÖ'}
            </Text>
          )}
          <Text style={styles.statusText}>{statusMessage}</Text>
          {!serverConnected && (
            <Text style={styles.warningIcon}>‚ö†Ô∏è</Text>
          )}
        </View>
      </View>

      {/* Device list */}
      <View style={styles.content}>
        {devices.length === 0 ? (
          renderEmptyState()
        ) : (
          <FlatList
            data={devices}
            keyExtractor={(item) => item.id}
            renderItem={renderDevice}
            showsVerticalScrollIndicator={false}
            style={styles.deviceList}
          />
        )}
      </View>

      {/* Floating action button */}
      <View style={styles.fabContainer}>
        {isScanning ? (
          <TouchableOpacity style={[styles.fab, styles.fabStop]} onPress={stopScan}>
            <Text style={styles.fabText}>‚èπÔ∏è</Text>
            <Text style={styles.fabLabel}>D·ª´ng qu√©t</Text>
          </TouchableOpacity>
        ) : (
          <TouchableOpacity style={styles.fab} onPress={startScan}>
            <Text style={styles.fabText}>üîç</Text>
            <Text style={styles.fabLabel}>Qu√©t thi·∫øt b·ªã</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#17a2b8',
    paddingTop: 50, // For status bar
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: 'white',
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  helpButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  helpButtonText: {
    fontSize: 14,
  },
  serverStatus: {
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  serverStatusText: {
    fontSize: 16,
  },
  statusBar: {
    backgroundColor: '#e8f4f8',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#dee2e6',
  },
  statusContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statusIcon: {
    marginRight: 12,
  },
  statusText: {
    flex: 1,
    fontSize: 14,
    color: '#17a2b8',
    fontWeight: '500',
  },
  warningIcon: {
    fontSize: 16,
  },
  content: {
    flex: 1,
  },
  deviceList: {
    flex: 1,
    padding: 16,
  },
  deviceItem: {
    backgroundColor: 'white',
    padding: 16,
    marginBottom: 12,
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  deviceIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#e8f4f8',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  deviceIconText: {
    fontSize: 24,
  },
  deviceInfo: {
    flex: 1,
  },
  deviceName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  deviceDetails: {
    fontSize: 14,
    color: '#666',
    marginBottom: 2,
  },
  deviceId: {
    fontSize: 12,
    color: '#999',
    marginBottom: 4,
  },
  signalContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  signalText: {
    fontSize: 12,
    color: '#666',
  },
  deviceActions: {
    alignItems: 'center',
  },
  registeredBadge: {
    backgroundColor: '#d4edda',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginBottom: 8,
  },
  registeredText: {
    fontSize: 10,
    color: '#155724',
    fontWeight: 'bold',
  },
  arrowText: {
    fontSize: 16,
    color: '#007AFF',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  emptyIcon: {
    fontSize: 80,
    marginBottom: 24,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#666',
    marginBottom: 16,
    textAlign: 'center',
  },
  emptySubtext: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
    lineHeight: 20,
    marginBottom: 24,
  },
  refreshButton: {
    backgroundColor: '#17a2b8',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
  },
  refreshButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  fabContainer: {
    position: 'absolute',
    bottom: 20,
    right: 20,
  },
  fab: {
    backgroundColor: '#17a2b8',
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 4.65,
    elevation: 8,
  },
  fabStop: {
    backgroundColor: '#dc3545',
  },
  fabText: {
    fontSize: 24,
    marginBottom: 4,
  },
  fabLabel: {
    fontSize: 10,
    color: 'white',
    fontWeight: '600',
  },
});

export default DeviceScanner;